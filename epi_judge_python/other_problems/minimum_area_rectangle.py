# Given a set of points in the xy-plane, determine the minimum area of a rectangle formed from these points, with sides
# parallel to the x and y axes.
#
# If there isn't any rectangle, return 0.

# Example 1:
#
# Input: [[1,1],[1,3],[3,1],[3,3],[2,2]]
# Output: 4
# Example 2:
#
# Input: [[1,1],[1,3],[3,1],[3,3],[4,1],[4,3]]
# Output: 2

# Note:
#
# 1 <= points.length <= 500
# 0 <= points[i][0] <= 40000
# 0 <= points[i][1] <= 40000
# All points are distinct.
from pprint import pprint

def minAreaRect(points):
    points_dict = {}
    for point in points:
        x_coord = point[0]
        if x_coord not in points_dict:
            points_dict[x_coord] = [point]
        else:
            points_dict[x_coord].append(point)

    left_sides = []
    for points_with_same_x in points_dict.values():
        for i in range(len(points_with_same_x)):
            for j in range(i + 1, len(points_with_same_x)):
                left_sides.append((points_with_same_x[i], points_with_same_x[j]))

    pprint(left_sides)
    result = float('inf')
    for i, left_side in enumerate(left_sides):
        for j in range(i + 1, len(left_sides)):
            right_side = left_sides[j]

            if left_side[0][0] != right_side[0][0]:
                left_bottom_y = left_side[0][1]
                left_top_y = left_side[1][1]
                right_bottom_y = right_side[0][1]
                right_top_y = right_side[1][1]

                right_side_y_coords = {right_bottom_y, right_top_y}

                if left_bottom_y in right_side_y_coords and left_top_y in right_side_y_coords:
                    left_bottom_x = left_side[0][0]
                    right_bottom_x = right_side[0][0]
                    length = abs(right_bottom_x - left_bottom_x)
                    width = abs(left_top_y - left_bottom_y)
                    result = min(result, length * width)

    return result

def minAreaRect2(points):
    points_set = set()
    for point in points:
        points_set.add(tuple(point))

    result = float('inf')
    for i, point_1 in enumerate(points):
        for j in range(i + 1, len(points)):
            point_2 = points[j]

            if point_1[0] != point_2[0] and point_1[1] != point_2[1]:
                point_1_inverse = (point_1[0], point_2[1])
                point_2_inverse = (point_2[0], point_1[1])

                if point_1_inverse in points_set and point_2_inverse in points_set:
                    length = abs(point_1[0] - point_2[0])
                    width = abs(point_1[1] - point_2[1])
                    result = min(result, length * width)

    return result if result != float('inf') else 0


if __name__ == '__main__':
    points = [[1,1],[1,3],[3,1],[3,3],[4,1],[4,3]]
    points_2 = [[18218,15359],[18230,8130],[26327,6032],[6217,12207],[4546,26783],[15835,37711],[18884,26957],[17211,24793],[36149,11988],[12057,441],[15835,5201],[19597,6032],[36194,24793],[18884,25848],[17211,11988],[4501,4332],[36194,25284],[12057,20188],[5672,24793],[12882,18968],[34692,35910],[26342,34109],[18230,18806],[39394,441],[26342,20188],[18218,26957],[35094,16186],[6217,20188],[17211,26957],[12882,26957],[17211,8130],[4546,26957],[17211,25284],[17211,18806],[39394,29352],[26327,4332],[12882,16186],[35094,14718],[32847,6032],[36068,14718],[5672,12207],[26342,18968],[36149,5102],[29015,14718],[18884,35910],[19597,26957],[32847,24793],[4501,18806],[12882,25848],[15835,4332],[32847,26783],[12882,5201],[4546,4332],[4501,12207],[34692,16186],[5672,37711],[36149,12207],[18218,11988],[18230,34109],[36194,8130],[17211,15359],[36068,15359],[18884,11988],[6217,35910],[34692,15359],[4501,25848],[19597,18806],[35094,11988],[18230,441],[18218,35910],[4501,16186],[6217,8130],[19597,24793],[39394,14718],[32847,15359],[18230,4332],[26327,24793],[32847,35910],[18884,441],[18884,18806],[26327,16186],[12882,26783],[17211,26783],[18884,15359],[15835,34109],[26327,25848],[18884,37711],[18230,11988],[29015,6032],[32847,26957],[17211,6032],[26342,26957],[36149,24793],[15835,18968],[36194,29352],[32847,14718],[4501,34109],[15835,35910],[18884,6032],[12057,16186],[35094,25284],[19597,20188],[34692,24793],[39394,24793],[18218,16186],[12882,15359],[5672,35910],[15835,8130],[26327,18968],[18218,25284],[36149,18968],[36194,16186],[36194,6032],[15835,11988],[5672,8130],[18884,29352],[18884,25284],[26327,25284],[15835,24793],[19597,16186],[12057,4332],[18230,25284],[32847,29352],[6217,5201],[18218,14718],[12057,8130],[29015,35910],[36149,25848],[35094,8130],[26327,14718],[36149,37711],[21750,6032],[29015,26783],[21750,16186],[12882,8130],[15835,441],[26342,26783],[4546,11988],[36194,12207],[39394,26957],[36149,26783],[15835,25284],[19597,34109],[39394,8130],[12057,18806],[6217,18968],[5672,25284],[18230,20188],[6217,26957],[39394,35910],[21750,26957],[12882,24793],[29015,20188],[18218,5102],[4546,441],[36194,14718],[18884,5201],[36149,34109],[18218,441],[29015,8130],[29015,5102],[18230,29352],[12057,37711],[39394,12207],[36068,441],[29015,26957],[18230,5201],[12882,20188],[32847,4332],[4546,6032],[12057,6032],[36194,26783],[36194,20188],[36068,29352],[36194,15359],[18218,6032],[35094,5201],[19597,37711],[12057,24793],[5672,26783],[35094,5102],[18218,12207],[6217,25284],[36194,25848],[34692,25848],[39394,5102],[17211,20188],[4501,26957],[39394,20188],[18218,29352],[21750,441],[4501,37711],[17211,5102],[29015,5201],[36149,4332],[6217,18806],[5672,15359],[4501,14718],[12882,37711],[4501,26783],[34692,441],[19597,29352],[4546,8130],[26327,35910],[26342,12207],[18218,20188],[18230,14718],[21750,8130],[12057,11988],[6217,11988],[17211,12207],[19597,25284],[15835,26783],[4501,29352],[26327,11988],[39394,18806],[39394,4332],[36068,25284],[6217,25848],[19597,15359],[18884,14718],[26342,5102],[36068,35910],[36149,14718],[12882,18806],[6217,5102],[18218,5201],[12057,25284],[34692,29352],[21750,4332],[21750,5201],[17211,441],[18218,4332],[18884,16186],[12882,6032],[18230,26783],[17211,14718],[36068,8130],[19597,11988],[4546,34109],[35094,15359],[36194,5201],[18884,34109],[39394,34109],[6217,441],[18230,25848],[12882,441],[12057,26783],[32847,11988],[35094,12207],[6217,26783],[36068,5102],[19597,35910],[12882,34109],[4546,35910],[29015,12207],[26342,4332],[4546,12207],[4546,18968],[21750,15359],[26327,26783],[17211,16186],[12057,34109],[32847,18806],[18230,18968],[32847,18968],[26327,15359],[12057,15359],[12882,12207],[4546,29352],[26327,18806],[29015,34109],[12057,35910],[18884,5102],[36149,29352],[21750,29352],[34692,18968],[32847,25284],[15835,15359],[21750,25848],[29015,441],[15835,18806],[4546,16186],[26342,14718],[21750,11988],[18230,24793],[35094,26957],[19597,5102],[18230,35910],[18230,6032],[29015,11988],[4546,37711],[36194,18806],[18218,24793],[35094,35910],[4546,5201],[39394,6032],[32847,12207],[35094,441],[18218,26783],[36149,441],[12882,5102],[36068,20188],[5672,26957],[4546,20188],[17211,18968],[34692,5102],[17211,35910],[18230,5102],[6217,34109],[32847,34109],[36194,441],[5672,20188],[18218,34109],[34692,25284],[36149,26957],[36068,18806]]

    print(minAreaRect(points_2))

    print(minAreaRect2(points_2))